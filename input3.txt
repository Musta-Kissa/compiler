extern {
    fn malloc(int i) -> *void {}
    fn printf(*char string,int val) {}
}

fn main() {
    "hello";
    arr_1: [10]int;
    arr_1[0] = 420;

    arr_1_ptr:*[]int= &arr_1;

    arr_2: [10]*[10]int;
    arr_2[0] = arr_1_ptr;

    abc: *[]*[]int = &arr_2;

    arr_2_deref: []*[]int= *abc;

    arr_2_elem: *[]int = arr_2_deref[0];

    arr_1_deref:= *arr_2_elem;
    printf("val:%d",arr_1_deref[0]);
}
EOF
struct Kot {
    kolor: *float;
    lives: int;
}


fn foo([]int arr, int i) {
    if arr.length > i  {
        arr[1] = 3;
    }
}

fn main(int argc, **char argv) -> int {
    printf("hello world!\n");
    void_ptr:*void = malloc(5);
    szkodnik:Kot;
    szkodnik.lives = 1*9;
    v: [10]int;
    v[1] = 3;
    v_ptr: = &v;
    b: []int = *v_ptr;
    foo(v,v.length-1);
    {
        v:int;
        example_int:int = argc/3+10*7;
    {
    }
        if argc > 1  {
            argc = 13;
        }
    }
    arr_1: [10]int;
    arr_1[0] = 420;

    arr_1_ptr:*[]int= &arr_1;

    arr_2: [10]*[]int;
    arr_2[1] = arr_1_ptr;

    abc: *[]*[]int = &arr_2;
    arr_2_deref: [10]*[]int= *abc;

    arr_2_elem: *[10]int = arr_2_deref[0];

    arr_1_deref:= *arr_2_elem;
}

EOF
extern fn malloc(int i) -> *void {}
struct Test {
    ala: int = 3;
    bartek: float;
    szkodnik: [1]Kot;
}

globalint:int= 3+10*7;

fn bar([]float bbb) -> int {
    return 3;
}

fn fazz([]Kot koty) {
    return;
}

fn fooz(float a,int b,int c) -> *float {
    string: *char= "hello sailor";
    z:*float = &a;
    v: [10]float;
    f: = bar(v);
    g:= a;
    test_var: Test;
    fazz(test_var.szkodnik);

    i: int;
    h: int = 420;
    for i:int = 1; i < b; ++i {
        i + b;
    }
    while a+a > a {
        x: int;
        x > c;
        return &a;
    }
    if g > g  {
        c: int;
        if( b > c) {
        }
    }
    i + b;
    if ( b > b ) {
        return &a;
    }
    {
        a: int;
        b: int;
    }
}
fn void_func() {
    void_func();
}

EOF
fn main(int argc, **char argv) -> int {

}

&(!(a == a));
a = &v[b][b];
// treat any dimentional arr as just a ptr and treat a ptr as a ptr
// [][]float bbb -> float bbb[]   OR float* bbb
// [][]*float bbb -> float* bbb[] OR float** bbb
// *[][]float bbb ->              OR float**
fn bar([][]float bbb) -> int {
    return 3;
}
